List:
    In python list can be created by refrencing it to variable and denoting it with a []
i.e: name = ['paul', 'prabahar']

list can hold any kind of data - str, int, float, boolean.

A list can also be empty i.e: emptylist = []

we can also create list using constructor function list()
i.e:- list([1,1,2,3,5,8,13])

To check a element is present in a list we can use "in" key word
eg:- print("paul" in name) -> which gives a boolean value in return. 

we can also access a elements in a list with a help of index value.
print(name[0]) -> which in retur gives paul as a value.

To find the position of a specific element in the list then we use a method called index()
i.e:- print(name.index("paul")) -> which return a index value 0

To print a range of elements in the list we can use bracket notation list[0:2]
i.e:- print(name[0:]) -> returns all the element in the list.

To check the length of a list we can use len() method.
i.e:- print(len(name)) -> which return 2 as a result.

To add a element to a existing list we can use append() method.
i.e:- name.append('lenin') -> which adds the new element to the list.

To add a element or an entire list we can use extend() method.
i.e:- name.extend(name2) to add an entire list.
    name.extend(['stewie']) to add an element.

To add an element to an desired position we can use insert() method.
i.e:- names.insert(0, "puppy") ->  which replace puppy at first of the list. 
We can also use [] for replacement to
i.e:-names[2:2] = ['rahul', 'kane'] -> which replace theses elements in the 2 position of the index.and the previous one's 
will be moved to the next index.
we can remove and replace the elements with [] to
i.e:- names[2:3] = ['rock'] -> which remove the elements in 2 index and replace it with rock.

To remove any element in the list we can use remove() method.
i.e:- names.remove('rock') -> which removes these element 

To remove the last element of the list we can use pop(). Which removes the last also return the value .
i.e: namey = names.pop() ->Now the last element is removed and the value is stored in the variable
     prabahar removed from the list
     print(namey) -> has prabahar stored in the variablr so gives the value.

We can also use del function to delete any element in the list
i.e:- del list[0] -> del the first element in the list

To delete all the elements in the list we can use clear() method which deletes all the element in the list and returns a 
empty list
i.e:- names.clear() -> all the element get deleted but the list is not deleted

To delete the list entierly we can use del function
i.e:- del names -> which deletes the list enterly and it dosen't exist anymaore

We can sort the element of the list with the with sort() method
i.e:- names.sort() -> will the element but uppper case gets priority.
To sort irrespective of their case we need to use sort() method with keys
i.e: names.sort(key=srt.lower) -> which makes uppper case precedence removed.

to modify the the without altering the original list we can use 2 methods
Method 1:
To use global method 
newNmaes = sorteed(nums) which creates a copy doesn't alter the original array. it just create a sorted copy of the list.
Method 2:
to use copy method
newNames = names.copy() 
it just create a copy of a list.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Tuples:
     Tuples are like list but they are immutable. i.e data inside a tuples cannot be changed or modified.
     tuples are represented with () eg (11,22,33,444)
we can create tuples by using constructor function called tuples()
eg:-my = tuples((1,2,3,4,5))

or by literal assignment
eg:- my = (1,2,3,4,5,6)

One of benifets of tuples are the can be unpacked.
(one,two,three,*remaining) = my
which assign value respectively 
one = 1
two = 2
three = 3
remaining = [4,5,6] * is use to represent the remaining in the remaining variable.

But to modify a tuple there is a way
convert tuple to list 
then modify the list
the convret the list to a tuple.

now the tuple is modified
eg:-
    #modifying a tuple
    modify = list(myNewTuple)
    modify.append(34)
    modified = tuple(modify)
    print(modified)